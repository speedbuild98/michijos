import Head from "next/head";
import { useSession } from "next-auth/react";
import { NavBar, PetCard } from "~/components";
import { Poppins } from "next/font/google";
import { api } from "~/utils/api";
import Link from "next/link";
import { AiOutlinePlusCircle } from "react-icons/ai";
import { useState } from "react";


const poppins = Poppins({
  subsets: ["latin"],
  display: "swap",
  weight: ["400", "500", "600", "700", "800", "900"],
});

const index = () => {
  const [filter, setFilter] = useState("all"); 
  const { data: sessionData } = useSession();

  const {
    data: pets
  } = api.pet.getAllPets.useQuery();

  // Función para aplicar el filtro
  const applyFilter = (filter) => {
    setFilter(filter);
  };

  // Filtrar las mascotas según el filtro seleccionado
  const filteredPets = pets
  ? pets.filter((pet) => {
      if (filter === "all") {
        return !pet.adopted;
      } else if (filter === "cats") {
        return !pet.adopted && pet.category === "Gato";
      } else if (filter === "dogs") {
        return !pet.adopted && pet.category === "Perro";
      } else if (filter === "adopted") {
        return pet.adopted;
      } else if (filter === "male") {
        return !pet.adopted && pet.gender === "Macho";
      } else if (filter === "female") {
        return !pet.adopted && pet.gender === "Hembra";
      }
    })
  : [];

   // Título dinámico según el filtro seleccionado
   const getTitle = () => {
    if (filter === "all") {
      return "Mascotas en adopción";
    } else if (filter === "cats") {
      return "Gatos en adopción";
    } else if (filter === "dogs") {
      return "Perros en adopción";
    } else if (filter === "adopted") {
      return "Mascotas adoptadas";
    } else if (filter === "male") {
      return "Machos en adopción";
    } else if (filter === "female") {
      return "Hembras en adopción";
    }
  };

  return (
    <>
      <Head>
        <title>MichiAPP | Mascotas</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <>
        <NavBar />
        <main
          className={`${poppins.className} flex min-h-screen flex-col px-5 md:px-20`}
        >
            <section className="py-10 flex flex-col">
      <div className="flex flex-row justify-between">
        <h1 className="text-3xl font-[500] text-neutral">
          {getTitle()}
        </h1>
      </div>
      <p className="text-sm text-[#929292]">Filtros</p>
      <div className="my-3 flex flex-row items-center justify-start gap-2">
        <button onClick={() => window.my_modal_5.showModal()}>
          <AiOutlinePlusCircle className="text-xl text-[#929292]" />
        </button>
        <dialog id="my_modal_5" className="modal modal-bottom sm:modal-middle">
          <form method="dialog" className="modal-box">
            <h3 className="flex items-center text-xs text-[#929292]">
              Filtros
            </h3>
            <div className="mt-4 flex flex-row flex-wrap gap-3">
              <button
                className={`flex h-5 w-14 flex-row items-center justify-center rounded-[26px] text-[10px] font-[600] ${
                  filter === "all"
                    ? "blue-degrade text-base-100"
                    : "border border-[#929292] bg-base-100 text-neutral"
                } shadow-md`}
                onClick={() => applyFilter("all")}
              >
                Todos
              </button>
              <button
                className={`flex h-5 w-14 flex-row items-center justify-center rounded-[26px] border border-[#929292] bg-base-100 text-[10px] font-[600] ${
                  filter === "cats"
                    ? "blue-degrade text-base-100"
                    : "border border-[#929292] bg-base-100 text-neutral"
                } shadow-sm`}
                onClick={() => applyFilter("cats")}
              >
                Gatos
              </button>
              <button
                className={`flex h-5 w-14 flex-row items-center justify-center rounded-[26px] border border-[#929292] bg-base-100 text-[10px] font-[600] ${
                  filter === "dogs"
                    ? "blue-degrade text-base-100"
                    : "border border-[#929292] bg-base-100 text-neutral"
                } shadow-sm`}
                onClick={() => applyFilter("dogs")}
              >
                Perros
              </button>

              <button
                className={`flex h-5 w-14 flex-row items-center justify-center rounded-[26px] border border-[#929292] bg-base-100 text-[10px] font-[600] ${
                  filter === "adopted"
                    ? "blue-degrade text-base-100"
                    : "border border-[#929292] bg-base-100 text-neutral"
                } shadow-sm`}
                onClick={() => applyFilter("adopted")}
              >
                Adoptados
              </button>
            </div>
            <div className="mt-4 flex flex-row flex-wrap gap-3">
              <button
                className={`flex h-5 w-14 flex-row items-center justify-center rounded-[26px] border border-[#929292] bg-base-100 text-[10px] font-[600] ${
                  filter === "male"
                    ? "blue-degrade text-base-100"
                    : "border border-[#929292] bg-base-100 text-neutral"
                } shadow-sm`}
                onClick={() => applyFilter("male")}
              >
                Machos
              </button>
              <button
                className={`flex h-5 w-14 flex-row items-center justify-center rounded-[26px] border border-[#929292] bg-base-100 text-[10px] font-[600] ${
                  filter === "female"
                    ? "blue-degrade text-base-100"
                    : "border border-[#929292] bg-base-100 text-neutral"
                } shadow-sm`}
                onClick={() => applyFilter("female")}
              >
                Hembras
              </button>
            </div>

            <div className="modal-action">
              {/* if there is a button in form, it will close the modal */}
              <button className="btn">Close</button>
            </div>
          </form>
        </dialog>
        <button
          className={`flex h-5 w-14 flex-row items-center justify-center rounded-[26px] text-[10px] font-[600] ${
            filter === "all"
              ? "blue-degrade text-base-100"
              : "border border-[#929292] bg-base-100 text-neutral"
          } shadow-md`}
          onClick={() => applyFilter("all")}
        >
          Todos
        </button>
        <button
          className={`flex h-5 w-14 flex-row items-center justify-center rounded-[26px] border border-[#929292] bg-base-100 text-[10px] font-[600] ${
            filter === "cats"
              ? "blue-degrade text-base-100"
              : "border border-[#929292] bg-base-100 text-neutral"
          } shadow-sm`}
          onClick={() => applyFilter("cats")}
        >
          Gatos
        </button>
        <button
          className={`flex h-5 w-14 flex-row items-center justify-center rounded-[26px] border border-[#929292] bg-base-100 text-[10px] font-[600] ${
            filter === "dogs"
              ? "blue-degrade text-base-100"
              : "border border-[#929292] bg-base-100 text-neutral"
          } shadow-sm`}
          onClick={() => applyFilter("dogs")}
        >
          Perros
        </button>
      </div>

      <p className="mb-2 text-xs text-[#929292] opacity-50">
        Mascotas cercanas a tu ubicación
      </p>
      <div className="flex flex-row flex-wrap justify-between gap-4 md:justify-start">
      {filteredPets.length === 0 ? (
          <p className="text-error text-center">No tenemos mascotas disponibles en adopción con el filtro {filter}.</p>
        ) : (
          filteredPets.map((pet) => (
            <PetCard
              key={pet.id}
              name={pet.name}
              age={pet.age}
              gender={pet.gender}
              description={pet.description}
              image={pet.image}
              id={pet.id}
              adopted={pet.adopted}
              weight={pet.weight}
              characteristics={pet.characteristics}
              liked={pet.liked}
              userId={sessionData?.user?.id}
              phone={pet.phone}
              creatorId={pet.userId}
            />
          ))
        )}
      </div>
    </section>
        </main>
      </>
    </>
  );
};

export default index;
